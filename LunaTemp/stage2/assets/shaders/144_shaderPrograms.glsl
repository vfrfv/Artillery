["\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Rotation;\nattribute highp vec4 in_POSITION0;\nvarying highp vec3 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nfloat u_xlat3;\nvoid main()\n{\n    u_xlat0.x = _Rotation * 0.0174532942;\n    u_xlat1.x = cos(u_xlat0.x);\n    u_xlat0.x = sin(u_xlat0.x);\n    u_xlat2.x = (-u_xlat0.x);\n    u_xlat2.y = u_xlat1.x;\n    u_xlat2.z = u_xlat0.x;\n    u_xlat0.x = dot(u_xlat2.zy, in_POSITION0.xz);\n    u_xlat3 = dot(u_xlat2.yx, in_POSITION0.xz);\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * vec4(u_xlat3) + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xyz = in_POSITION0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _Tex_HDR;\nuniform \tmediump vec4 _Tint;\nuniform \tmediump float _Exposure;\nuniform lowp samplerCube _Tex;\nvarying highp vec3 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nlowp vec4 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat10_0 = textureCube(_Tex, vs_TEXCOORD0.xyz);\n    u_xlat16_1.x = u_xlat10_0.w + -1.0;\n    u_xlat16_1.x = _Tex_HDR.w * u_xlat16_1.x + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * _Tex_HDR.x;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * _Tint.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_Exposure);\n    SV_Target0.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Rotation;\nin highp vec4 in_POSITION0;\nout highp vec3 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nfloat u_xlat3;\nvoid main()\n{\n    u_xlat0.x = _Rotation * 0.0174532942;\n    u_xlat1.x = cos(u_xlat0.x);\n    u_xlat0.x = sin(u_xlat0.x);\n    u_xlat2.x = (-u_xlat0.x);\n    u_xlat2.y = u_xlat1.x;\n    u_xlat2.z = u_xlat0.x;\n    u_xlat0.x = dot(u_xlat2.zy, in_POSITION0.xz);\n    u_xlat3 = dot(u_xlat2.yx, in_POSITION0.xz);\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * vec4(u_xlat3) + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xyz = in_POSITION0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _Tex_HDR;\nuniform \tmediump vec4 _Tint;\nuniform \tmediump float _Exposure;\nUNITY_LOCATION(0) uniform mediump samplerCube _Tex;\nin highp vec3 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture(_Tex, vs_TEXCOORD0.xyz);\n    u_xlat16_1.x = u_xlat16_0.w + -1.0;\n    u_xlat16_1.x = _Tex_HDR.w * u_xlat16_1.x + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * _Tex_HDR.x;\n    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * _Tint.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_Exposure);\n    SV_Target0.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"]