["\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nbool u_xlatb2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nbvec3 u_xlatb7;\nmediump vec4 u_xlat16_8;\nvec3 u_xlat9;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nfloat u_xlat11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_14;\nmediump float u_xlat16_19;\nfloat u_xlat22;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat33;\nfloat u_xlat35;\nlowp float u_xlat10_35;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nbool u_xlatb37;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_1 = max(_SpecColor.y, _SpecColor.x);\n    u_xlat16_1 = max(u_xlat16_1, _SpecColor.z);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_12.xyz = u_xlat0.xyz * vec3(u_xlat16_1);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat33 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat33 = inversesqrt(u_xlat33);\n    u_xlat2.xyz = vec3(u_xlat33) * vs_TEXCOORD1.xyz;\n    u_xlat10_35 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_35 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat35 = (-_Glossiness) + 1.0;\n    u_xlat16_14.x = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat16_14.x = u_xlat16_14.x + u_xlat16_14.x;\n    u_xlat16_14.xyz = u_xlat0.xyz * (-u_xlat16_14.xxx) + u_xlat2.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb4){\n        u_xlat4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n        u_xlat4.x = inversesqrt(u_xlat4.x);\n        u_xlat4.xyz = u_xlat16_14.xyz * u_xlat4.xxx;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;\n        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;\n            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;\n            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat37 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat37 = min(u_xlat5.z, u_xlat37);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat37) + u_xlat5.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_14.xyz;\n    }\n    u_xlat16_8.x = (-u_xlat35) * 0.699999988 + 1.70000005;\n    u_xlat16_8.x = u_xlat35 * u_xlat16_8.x;\n    u_xlat16_8.x = u_xlat16_8.x * 6.0;\n    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_8.x);\n    u_xlat16_19 = u_xlat10_4.w + -1.0;\n    u_xlat16_19 = unity_SpecCube0_HDR.w * u_xlat16_19 + 1.0;\n    u_xlat16_19 = u_xlat16_19 * unity_SpecCube0_HDR.x;\n    u_xlat16_9.xyz = u_xlat10_4.xyz * vec3(u_xlat16_19);\n    u_xlatb37 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb37){\n        u_xlatb37 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb37){\n            u_xlat37 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n            u_xlat37 = inversesqrt(u_xlat37);\n            u_xlat5.xyz = u_xlat16_14.xyz * vec3(u_xlat37);\n            u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat6;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat6.x : u_xlat7.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat6.y : u_xlat7.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat6.z : u_xlat7.z;\n                u_xlat6 = hlslcc_movcTemp;\n            }\n            u_xlat37 = min(u_xlat6.y, u_xlat6.x);\n            u_xlat37 = min(u_xlat6.z, u_xlat37);\n            u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat37) + u_xlat6.xyz;\n        } else {\n            u_xlat5.xyz = u_xlat16_14.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat5.xyz, u_xlat16_8.x);\n        u_xlat16_14.x = u_xlat10_5.w + -1.0;\n        u_xlat16_14.x = unity_SpecCube1_HDR.w * u_xlat16_14.x + 1.0;\n        u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube1_HDR.x;\n        u_xlat16_14.xyz = u_xlat10_5.xyz * u_xlat16_14.xxx;\n        u_xlat4.xyz = vec3(u_xlat16_19) * u_xlat10_4.xyz + (-u_xlat16_14.xyz);\n        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat16_14.xyz;\n        u_xlat16_9.xyz = u_xlat9.xyz;\n    }\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;\n    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat33 = max(u_xlat33, 0.00100000005);\n    u_xlat33 = inversesqrt(u_xlat33);\n    u_xlat4.xyz = vec3(u_xlat33) * u_xlat4.xyz;\n    u_xlat33 = dot(u_xlat0.xyz, (-u_xlat2.xyz));\n    u_xlat2.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat11 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);\n    u_xlat16_36 = u_xlat11 + u_xlat11;\n    u_xlat16_36 = u_xlat11 * u_xlat16_36;\n    u_xlat16_36 = u_xlat16_36 * u_xlat35 + -0.5;\n    u_xlat16_8.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_19 = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_19;\n    u_xlat16_8.x = u_xlat16_36 * u_xlat16_8.x + 1.0;\n    u_xlat16_19 = -abs(u_xlat33) + 1.0;\n    u_xlat16_30 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_30;\n    u_xlat16_36 = u_xlat16_36 * u_xlat16_19 + 1.0;\n    u_xlat16_36 = u_xlat16_36 * u_xlat16_8.x;\n    u_xlat22 = u_xlat2.x * u_xlat16_36;\n    u_xlat13 = u_xlat35 * u_xlat35;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat24 = (-u_xlat13) + 1.0;\n    u_xlat4.x = abs(u_xlat33) * u_xlat24 + u_xlat13;\n    u_xlat24 = u_xlat2.x * u_xlat24 + u_xlat13;\n    u_xlat33 = abs(u_xlat33) * u_xlat24;\n    u_xlat33 = u_xlat2.x * u_xlat4.x + u_xlat33;\n    u_xlat33 = u_xlat33 + 9.99999975e-06;\n    u_xlat33 = 0.5 / u_xlat33;\n    u_xlat24 = u_xlat13 * u_xlat13;\n    u_xlat4.x = u_xlat0.x * u_xlat24 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 1.0;\n    u_xlat24 = u_xlat24 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat24 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat33;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat2.x * u_xlat0.x;\n    u_xlat33 = u_xlat13 * u_xlat35;\n    u_xlat33 = (-u_xlat33) * 0.280000001 + 1.0;\n    u_xlat16_36 = dot(_SpecColor.xyz, _SpecColor.xyz);\n    u_xlatb2 = u_xlat16_36!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat2.x;\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_1 = u_xlat16_1 + _Glossiness;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_8.xzw = vec3(u_xlat22) * _LightColor0.xyz;\n    u_xlat2.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_36 = (-u_xlat11) + 1.0;\n    u_xlat16_9.x = u_xlat16_36 * u_xlat16_36;\n    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_9.x;\n    u_xlat16_36 = u_xlat16_36 * u_xlat16_9.x;\n    u_xlat16_9.xyz = (-_SpecColor.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_36) + _SpecColor.xyz;\n    u_xlat0.xyz = u_xlat2.xyz * u_xlat16_9.xyz;\n    u_xlat0.xyz = u_xlat16_12.xyz * u_xlat16_8.xzw + u_xlat0.xyz;\n    u_xlat16_12.xyz = u_xlat16_3.xyz * vec3(u_xlat33);\n    u_xlat16_3.xyz = vec3(u_xlat16_1) + (-_SpecColor.xyz);\n    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz + _SpecColor.xyz;\n    u_xlat0.xyz = u_xlat16_12.xyz * u_xlat16_3.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nbool u_xlatb2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec4 u_xlat16_4;\nbool u_xlatb4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nbvec3 u_xlatb7;\nmediump vec4 u_xlat16_8;\nvec3 u_xlat9;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nfloat u_xlat11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_14;\nmediump float u_xlat16_19;\nfloat u_xlat22;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat33;\nfloat u_xlat35;\nmediump float u_xlat16_35;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nbool u_xlatb37;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_1 = max(_SpecColor.y, _SpecColor.x);\n    u_xlat16_1 = max(u_xlat16_1, _SpecColor.z);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_12.xyz = u_xlat0.xyz * vec3(u_xlat16_1);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat33 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat33 = inversesqrt(u_xlat33);\n    u_xlat2.xyz = vec3(u_xlat33) * vs_TEXCOORD1.xyz;\n    u_xlat16_35 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_35 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat35 = (-_Glossiness) + 1.0;\n    u_xlat16_14.x = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat16_14.x = u_xlat16_14.x + u_xlat16_14.x;\n    u_xlat16_14.xyz = u_xlat0.xyz * (-u_xlat16_14.xxx) + u_xlat2.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb4){\n        u_xlat4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n        u_xlat4.x = inversesqrt(u_xlat4.x);\n        u_xlat4.xyz = u_xlat16_14.xyz * u_xlat4.xxx;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;\n        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;\n            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;\n            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat37 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat37 = min(u_xlat5.z, u_xlat37);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat37) + u_xlat5.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_14.xyz;\n    }\n    u_xlat16_8.x = (-u_xlat35) * 0.699999988 + 1.70000005;\n    u_xlat16_8.x = u_xlat35 * u_xlat16_8.x;\n    u_xlat16_8.x = u_xlat16_8.x * 6.0;\n    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_8.x);\n    u_xlat16_19 = u_xlat16_4.w + -1.0;\n    u_xlat16_19 = unity_SpecCube0_HDR.w * u_xlat16_19 + 1.0;\n    u_xlat16_19 = u_xlat16_19 * unity_SpecCube0_HDR.x;\n    u_xlat16_9.xyz = u_xlat16_4.xyz * vec3(u_xlat16_19);\n    u_xlatb37 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb37){\n        u_xlatb37 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb37){\n            u_xlat37 = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n            u_xlat37 = inversesqrt(u_xlat37);\n            u_xlat5.xyz = u_xlat16_14.xyz * vec3(u_xlat37);\n            u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat6;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat6.x : u_xlat7.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat6.y : u_xlat7.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat6.z : u_xlat7.z;\n                u_xlat6 = hlslcc_movcTemp;\n            }\n            u_xlat37 = min(u_xlat6.y, u_xlat6.x);\n            u_xlat37 = min(u_xlat6.z, u_xlat37);\n            u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat37) + u_xlat6.xyz;\n        } else {\n            u_xlat5.xyz = u_xlat16_14.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat16_8.x);\n        u_xlat16_14.x = u_xlat16_5.w + -1.0;\n        u_xlat16_14.x = unity_SpecCube1_HDR.w * u_xlat16_14.x + 1.0;\n        u_xlat16_14.x = u_xlat16_14.x * unity_SpecCube1_HDR.x;\n        u_xlat16_14.xyz = u_xlat16_5.xyz * u_xlat16_14.xxx;\n        u_xlat4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + (-u_xlat16_14.xyz);\n        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat16_14.xyz;\n        u_xlat16_9.xyz = u_xlat9.xyz;\n    }\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;\n    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat33 = max(u_xlat33, 0.00100000005);\n    u_xlat33 = inversesqrt(u_xlat33);\n    u_xlat4.xyz = vec3(u_xlat33) * u_xlat4.xyz;\n    u_xlat33 = dot(u_xlat0.xyz, (-u_xlat2.xyz));\n    u_xlat2.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat11 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);\n    u_xlat16_36 = u_xlat11 + u_xlat11;\n    u_xlat16_36 = u_xlat11 * u_xlat16_36;\n    u_xlat16_36 = u_xlat16_36 * u_xlat35 + -0.5;\n    u_xlat16_8.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_19 = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_19;\n    u_xlat16_8.x = u_xlat16_36 * u_xlat16_8.x + 1.0;\n    u_xlat16_19 = -abs(u_xlat33) + 1.0;\n    u_xlat16_30 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_30;\n    u_xlat16_36 = u_xlat16_36 * u_xlat16_19 + 1.0;\n    u_xlat16_36 = u_xlat16_36 * u_xlat16_8.x;\n    u_xlat22 = u_xlat2.x * u_xlat16_36;\n    u_xlat13 = u_xlat35 * u_xlat35;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat24 = (-u_xlat13) + 1.0;\n    u_xlat4.x = abs(u_xlat33) * u_xlat24 + u_xlat13;\n    u_xlat24 = u_xlat2.x * u_xlat24 + u_xlat13;\n    u_xlat33 = abs(u_xlat33) * u_xlat24;\n    u_xlat33 = u_xlat2.x * u_xlat4.x + u_xlat33;\n    u_xlat33 = u_xlat33 + 9.99999975e-06;\n    u_xlat33 = 0.5 / u_xlat33;\n    u_xlat24 = u_xlat13 * u_xlat13;\n    u_xlat4.x = u_xlat0.x * u_xlat24 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 1.0;\n    u_xlat24 = u_xlat24 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat24 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat33;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat2.x * u_xlat0.x;\n    u_xlat33 = u_xlat13 * u_xlat35;\n    u_xlat33 = (-u_xlat33) * 0.280000001 + 1.0;\n    u_xlat16_36 = dot(_SpecColor.xyz, _SpecColor.xyz);\n    u_xlatb2 = u_xlat16_36!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat2.x;\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_1 = u_xlat16_1 + _Glossiness;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_8.xzw = vec3(u_xlat22) * _LightColor0.xyz;\n    u_xlat2.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_36 = (-u_xlat11) + 1.0;\n    u_xlat16_9.x = u_xlat16_36 * u_xlat16_36;\n    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_9.x;\n    u_xlat16_36 = u_xlat16_36 * u_xlat16_9.x;\n    u_xlat16_9.xyz = (-_SpecColor.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_36) + _SpecColor.xyz;\n    u_xlat0.xyz = u_xlat2.xyz * u_xlat16_9.xyz;\n    u_xlat0.xyz = u_xlat16_12.xyz * u_xlat16_8.xzw + u_xlat0.xyz;\n    u_xlat16_12.xyz = u_xlat16_3.xyz * vec3(u_xlat33);\n    u_xlat16_3.xyz = vec3(u_xlat16_1) + (-_SpecColor.xyz);\n    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz + _SpecColor.xyz;\n    u_xlat0.xyz = u_xlat16_12.xyz * u_xlat16_3.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat16_2.xyz);\n    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = 0.0;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);\n    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _SpecGlossMap;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nmediump float u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nbool u_xlatb5;\nfloat u_xlat6;\nlowp float u_xlat10_6;\nvec3 u_xlat7;\nlowp vec4 u_xlat10_7;\nvec3 u_xlat8;\nlowp vec4 u_xlat10_8;\nvec3 u_xlat9;\nvec3 u_xlat10;\nbvec3 u_xlatb10;\nvec3 u_xlat11;\nmediump vec3 u_xlat16_11;\nbvec3 u_xlatb12;\nfloat u_xlat14;\nmediump vec3 u_xlat16_15;\nmediump vec3 u_xlat16_16;\nmediump float u_xlat16_17;\nvec3 u_xlat18;\nvec3 u_xlat19;\nfloat u_xlat27;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nfloat u_xlat40;\nbool u_xlatb40;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_SpecGlossMap, vs_TEXCOORD0.xy);\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_2 = max(u_xlat10_0.y, u_xlat10_0.x);\n    u_xlat16_2 = max(u_xlat10_0.z, u_xlat16_2);\n    u_xlat16_2 = (-u_xlat16_2) + 1.0;\n    u_xlat16_15.xyz = u_xlat1.xyz * vec3(u_xlat16_2);\n    u_xlat10_1.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy).yw;\n    u_xlat16_3.xy = u_xlat10_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_29 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_29 = min(u_xlat16_29, 1.0);\n    u_xlat16_29 = (-u_xlat16_29) + 1.0;\n    u_xlat16_29 = sqrt(u_xlat16_29);\n    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_BumpScale);\n    u_xlat16_4.xyz = u_xlat16_3.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_3.xyw = vs_TEXCOORD2.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat16_29) + u_xlat16_3.xyw;\n    u_xlat1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_3.xyz;\n    u_xlat5.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat18.xyz = u_xlat5.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_6 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_6 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat6 = (-u_xlat10_0.w) * _GlossMapScale + 1.0;\n    u_xlat16_16.x = dot(u_xlat18.xyz, u_xlat1.xyz);\n    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;\n    u_xlat16_16.xyz = u_xlat1.xyz * (-u_xlat16_16.xxx) + u_xlat18.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat19.xyz = log2(u_xlat16_4.xyz);\n    u_xlat19.xyz = u_xlat19.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat19.xyz = exp2(u_xlat19.xyz);\n    u_xlat19.xyz = u_xlat19.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat19.xyz = max(u_xlat19.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb40){\n        u_xlat40 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n        u_xlat40 = inversesqrt(u_xlat40);\n        u_xlat7.xyz = vec3(u_xlat40) * u_xlat16_16.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat40 = min(u_xlat8.z, u_xlat40);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_16.xyz;\n    }\n    u_xlat16_4.x = (-u_xlat6) * 0.699999988 + 1.70000005;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat6;\n    u_xlat16_4.x = u_xlat16_4.x * 6.0;\n    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_4.x);\n    u_xlat16_17 = u_xlat10_7.w + -1.0;\n    u_xlat16_17 = unity_SpecCube0_HDR.w * u_xlat16_17 + 1.0;\n    u_xlat16_17 = u_xlat16_17 * unity_SpecCube0_HDR.x;\n    u_xlat16_11.xyz = u_xlat10_7.xyz * vec3(u_xlat16_17);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat40 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n            u_xlat40 = inversesqrt(u_xlat40);\n            u_xlat8.xyz = vec3(u_xlat40) * u_xlat16_16.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat9;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat9.x : u_xlat10.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat9.y : u_xlat10.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat9.z : u_xlat10.z;\n                u_xlat9 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat9.y, u_xlat9.x);\n            u_xlat40 = min(u_xlat9.z, u_xlat40);\n            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat40) + u_xlat9.xyz;\n        } else {\n            u_xlat8.xyz = u_xlat16_16.xyz;\n        }\n        u_xlat10_8 = textureCubeLodEXT(unity_SpecCube1, u_xlat8.xyz, u_xlat16_4.x);\n        u_xlat16_16.x = u_xlat10_8.w + -1.0;\n        u_xlat16_16.x = unity_SpecCube1_HDR.w * u_xlat16_16.x + 1.0;\n        u_xlat16_16.x = u_xlat16_16.x * unity_SpecCube1_HDR.x;\n        u_xlat16_16.xyz = u_xlat10_8.xyz * u_xlat16_16.xxx;\n        u_xlat7.xyz = vec3(u_xlat16_17) * u_xlat10_7.xyz + (-u_xlat16_16.xyz);\n        u_xlat11.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_16.xyz;\n        u_xlat16_11.xyz = u_xlat11.xyz;\n    }\n    u_xlat16_16.xyz = u_xlat16_3.xxx * u_xlat16_11.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat5.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat40 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat40 = max(u_xlat40, 0.00100000005);\n    u_xlat40 = inversesqrt(u_xlat40);\n    u_xlat7.xyz = vec3(u_xlat40) * u_xlat7.xyz;\n    u_xlat40 = dot(u_xlat1.xyz, (-u_xlat18.xyz));\n    u_xlat5.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat7.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat14 + u_xlat14;\n    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat6 + -0.5;\n    u_xlat16_17 = (-u_xlat5.x) + 1.0;\n    u_xlat16_30 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_30;\n    u_xlat16_17 = u_xlat16_4.x * u_xlat16_17 + 1.0;\n    u_xlat16_30 = -abs(u_xlat40) + 1.0;\n    u_xlat16_43 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_43;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_30 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_17;\n    u_xlat27 = u_xlat5.x * u_xlat16_4.x;\n    u_xlat18.x = u_xlat6 * u_xlat6;\n    u_xlat18.x = max(u_xlat18.x, 0.00200000009);\n    u_xlat31 = (-u_xlat18.x) + 1.0;\n    u_xlat44 = abs(u_xlat40) * u_xlat31 + u_xlat18.x;\n    u_xlat31 = u_xlat5.x * u_xlat31 + u_xlat18.x;\n    u_xlat40 = abs(u_xlat40) * u_xlat31;\n    u_xlat40 = u_xlat5.x * u_xlat44 + u_xlat40;\n    u_xlat40 = u_xlat40 + 9.99999975e-06;\n    u_xlat40 = 0.5 / u_xlat40;\n    u_xlat31 = u_xlat18.x * u_xlat18.x;\n    u_xlat44 = u_xlat1.x * u_xlat31 + (-u_xlat1.x);\n    u_xlat1.x = u_xlat44 * u_xlat1.x + 1.0;\n    u_xlat31 = u_xlat31 * 0.318309873;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat1.x = u_xlat31 / u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat40;\n    u_xlat1.x = u_xlat1.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat5.x * u_xlat1.x;\n    u_xlat40 = u_xlat18.x * u_xlat6;\n    u_xlat40 = (-u_xlat40) * 0.280000001 + 1.0;\n    u_xlat16_4.x = dot(u_xlat10_0.xyz, u_xlat10_0.xyz);\n    u_xlatb5 = u_xlat16_4.x!=0.0;\n    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);\n    u_xlat1.x = u_xlat1.x * u_xlat5.x;\n    u_xlat16_2 = (-u_xlat16_2) + 1.0;\n    u_xlat16_2 = u_xlat10_0.w * _GlossMapScale + u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_4.xyw = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat16_4.xyw = u_xlat19.xyz * u_xlat16_3.xxx + u_xlat16_4.xyw;\n    u_xlat5.xyz = u_xlat1.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat14) + 1.0;\n    u_xlat16_11.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11.x;\n    u_xlat16_11.xyz = (-u_xlat10_0.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_3.xxx + u_xlat10_0.xyz;\n    u_xlat1.xyz = u_xlat5.xyz * u_xlat16_11.xyz;\n    u_xlat1.xyz = u_xlat16_15.xyz * u_xlat16_4.xyw + u_xlat1.xyz;\n    u_xlat16_15.xyz = u_xlat16_16.xyz * vec3(u_xlat40);\n    u_xlat16_3.xyz = (-u_xlat10_0.xyz) + vec3(u_xlat16_2);\n    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz + u_xlat10_0.xyz;\n    u_xlat0.xyz = u_xlat16_15.xyz * u_xlat16_3.xyz + u_xlat1.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nin mediump vec4 in_TANGENT0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat16_2.xyz);\n    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = 0.0;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);\n    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _SpecGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(5) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump float u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nbool u_xlatb5;\nfloat u_xlat6;\nmediump float u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec4 u_xlat16_8;\nvec3 u_xlat9;\nvec3 u_xlat10;\nbvec3 u_xlatb10;\nvec3 u_xlat11;\nmediump vec3 u_xlat16_11;\nbvec3 u_xlatb12;\nfloat u_xlat14;\nmediump vec3 u_xlat16_15;\nmediump vec3 u_xlat16_16;\nmediump float u_xlat16_17;\nvec3 u_xlat18;\nvec3 u_xlat19;\nfloat u_xlat27;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nfloat u_xlat40;\nbool u_xlatb40;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nvoid main()\n{\n    u_xlat16_0 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_2 = max(u_xlat16_0.y, u_xlat16_0.x);\n    u_xlat16_2 = max(u_xlat16_0.z, u_xlat16_2);\n    u_xlat16_2 = (-u_xlat16_2) + 1.0;\n    u_xlat16_15.xyz = u_xlat1.xyz * vec3(u_xlat16_2);\n    u_xlat16_1.xy = texture(_BumpMap, vs_TEXCOORD0.xy).yw;\n    u_xlat16_3.xy = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_29 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_29 = min(u_xlat16_29, 1.0);\n    u_xlat16_29 = (-u_xlat16_29) + 1.0;\n    u_xlat16_29 = sqrt(u_xlat16_29);\n    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_BumpScale);\n    u_xlat16_4.xyz = u_xlat16_3.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_3.xyw = vs_TEXCOORD2.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat16_29) + u_xlat16_3.xyw;\n    u_xlat1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_3.xyz;\n    u_xlat5.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat18.xyz = u_xlat5.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_6 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_6 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat6 = (-u_xlat16_0.w) * _GlossMapScale + 1.0;\n    u_xlat16_16.x = dot(u_xlat18.xyz, u_xlat1.xyz);\n    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;\n    u_xlat16_16.xyz = u_xlat1.xyz * (-u_xlat16_16.xxx) + u_xlat18.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat19.xyz = log2(u_xlat16_4.xyz);\n    u_xlat19.xyz = u_xlat19.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat19.xyz = exp2(u_xlat19.xyz);\n    u_xlat19.xyz = u_xlat19.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat19.xyz = max(u_xlat19.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb40){\n        u_xlat40 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n        u_xlat40 = inversesqrt(u_xlat40);\n        u_xlat7.xyz = vec3(u_xlat40) * u_xlat16_16.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat40 = min(u_xlat8.z, u_xlat40);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_16.xyz;\n    }\n    u_xlat16_4.x = (-u_xlat6) * 0.699999988 + 1.70000005;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat6;\n    u_xlat16_4.x = u_xlat16_4.x * 6.0;\n    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat16_4.x);\n    u_xlat16_17 = u_xlat16_7.w + -1.0;\n    u_xlat16_17 = unity_SpecCube0_HDR.w * u_xlat16_17 + 1.0;\n    u_xlat16_17 = u_xlat16_17 * unity_SpecCube0_HDR.x;\n    u_xlat16_11.xyz = u_xlat16_7.xyz * vec3(u_xlat16_17);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat40 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n            u_xlat40 = inversesqrt(u_xlat40);\n            u_xlat8.xyz = vec3(u_xlat40) * u_xlat16_16.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat9;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat9.x : u_xlat10.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat9.y : u_xlat10.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat9.z : u_xlat10.z;\n                u_xlat9 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat9.y, u_xlat9.x);\n            u_xlat40 = min(u_xlat9.z, u_xlat40);\n            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat40) + u_xlat9.xyz;\n        } else {\n            u_xlat8.xyz = u_xlat16_16.xyz;\n        }\n        u_xlat16_8 = textureLod(unity_SpecCube1, u_xlat8.xyz, u_xlat16_4.x);\n        u_xlat16_16.x = u_xlat16_8.w + -1.0;\n        u_xlat16_16.x = unity_SpecCube1_HDR.w * u_xlat16_16.x + 1.0;\n        u_xlat16_16.x = u_xlat16_16.x * unity_SpecCube1_HDR.x;\n        u_xlat16_16.xyz = u_xlat16_8.xyz * u_xlat16_16.xxx;\n        u_xlat7.xyz = vec3(u_xlat16_17) * u_xlat16_7.xyz + (-u_xlat16_16.xyz);\n        u_xlat11.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_16.xyz;\n        u_xlat16_11.xyz = u_xlat11.xyz;\n    }\n    u_xlat16_16.xyz = u_xlat16_3.xxx * u_xlat16_11.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat5.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat40 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat40 = max(u_xlat40, 0.00100000005);\n    u_xlat40 = inversesqrt(u_xlat40);\n    u_xlat7.xyz = vec3(u_xlat40) * u_xlat7.xyz;\n    u_xlat40 = dot(u_xlat1.xyz, (-u_xlat18.xyz));\n    u_xlat5.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat7.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat14 + u_xlat14;\n    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat6 + -0.5;\n    u_xlat16_17 = (-u_xlat5.x) + 1.0;\n    u_xlat16_30 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_30;\n    u_xlat16_17 = u_xlat16_4.x * u_xlat16_17 + 1.0;\n    u_xlat16_30 = -abs(u_xlat40) + 1.0;\n    u_xlat16_43 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_43;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_30 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_17;\n    u_xlat27 = u_xlat5.x * u_xlat16_4.x;\n    u_xlat18.x = u_xlat6 * u_xlat6;\n    u_xlat18.x = max(u_xlat18.x, 0.00200000009);\n    u_xlat31 = (-u_xlat18.x) + 1.0;\n    u_xlat44 = abs(u_xlat40) * u_xlat31 + u_xlat18.x;\n    u_xlat31 = u_xlat5.x * u_xlat31 + u_xlat18.x;\n    u_xlat40 = abs(u_xlat40) * u_xlat31;\n    u_xlat40 = u_xlat5.x * u_xlat44 + u_xlat40;\n    u_xlat40 = u_xlat40 + 9.99999975e-06;\n    u_xlat40 = 0.5 / u_xlat40;\n    u_xlat31 = u_xlat18.x * u_xlat18.x;\n    u_xlat44 = u_xlat1.x * u_xlat31 + (-u_xlat1.x);\n    u_xlat1.x = u_xlat44 * u_xlat1.x + 1.0;\n    u_xlat31 = u_xlat31 * 0.318309873;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat1.x = u_xlat31 / u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat40;\n    u_xlat1.x = u_xlat1.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat5.x * u_xlat1.x;\n    u_xlat40 = u_xlat18.x * u_xlat6;\n    u_xlat40 = (-u_xlat40) * 0.280000001 + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);\n    u_xlatb5 = u_xlat16_4.x!=0.0;\n    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);\n    u_xlat1.x = u_xlat1.x * u_xlat5.x;\n    u_xlat16_2 = (-u_xlat16_2) + 1.0;\n    u_xlat16_2 = u_xlat16_0.w * _GlossMapScale + u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_4.xyw = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat16_4.xyw = u_xlat19.xyz * u_xlat16_3.xxx + u_xlat16_4.xyw;\n    u_xlat5.xyz = u_xlat1.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat14) + 1.0;\n    u_xlat16_11.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11.x;\n    u_xlat16_11.xyz = (-u_xlat16_0.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_3.xxx + u_xlat16_0.xyz;\n    u_xlat1.xyz = u_xlat5.xyz * u_xlat16_11.xyz;\n    u_xlat1.xyz = u_xlat16_15.xyz * u_xlat16_4.xyw + u_xlat1.xyz;\n    u_xlat16_15.xyz = u_xlat16_16.xyz * vec3(u_xlat40);\n    u_xlat16_3.xyz = (-u_xlat16_0.xyz) + vec3(u_xlat16_2);\n    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz + u_xlat16_0.xyz;\n    u_xlat0.xyz = u_xlat16_15.xyz * u_xlat16_3.xyz + u_xlat1.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nbool u_xlatb2;\nfloat u_xlat3;\nlowp float u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nvec3 u_xlat6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nlowp vec4 u_xlat10_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nmediump vec3 u_xlat16_13;\nvec3 u_xlat14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_16;\nmediump float u_xlat16_17;\nfloat u_xlat24;\nfloat u_xlat26;\nmediump float u_xlat16_29;\nfloat u_xlat36;\nbool u_xlatb36;\nfloat u_xlat38;\nmediump float u_xlat16_41;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_1 = max(_SpecColor.y, _SpecColor.x);\n    u_xlat16_1 = max(u_xlat16_1, _SpecColor.z);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_13.xyz = u_xlat0.xyz * vec3(u_xlat16_1);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat14.xyz = u_xlat2.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_3 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_4.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_4.x = u_xlat10_3 * _OcclusionStrength + u_xlat16_4.x;\n    u_xlat3 = (-_Glossiness) + 1.0;\n    u_xlat16_16.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;\n    u_xlat16_16.xyz = u_xlat0.xyz * (-u_xlat16_16.xxx) + u_xlat14.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat15.xyz = log2(u_xlat16_5.xyz);\n    u_xlat15.xyz = u_xlat15.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat15.xyz = exp2(u_xlat15.xyz);\n    u_xlat15.xyz = u_xlat15.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat15.xyz = max(u_xlat15.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb36 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb36){\n        u_xlat36 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n        u_xlat36 = inversesqrt(u_xlat36);\n        u_xlat6.xyz = vec3(u_xlat36) * u_xlat16_16.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat7;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n            u_xlat7 = hlslcc_movcTemp;\n        }\n        u_xlat36 = min(u_xlat7.y, u_xlat7.x);\n        u_xlat36 = min(u_xlat7.z, u_xlat36);\n        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat7.xyz;\n    } else {\n        u_xlat6.xyz = u_xlat16_16.xyz;\n    }\n    u_xlat16_5.x = (-u_xlat3) * 0.699999988 + 1.70000005;\n    u_xlat16_5.x = u_xlat3 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat6.xyz, u_xlat16_5.x);\n    u_xlat16_17 = u_xlat10_6.w + -1.0;\n    u_xlat16_17 = unity_SpecCube0_HDR.w * u_xlat16_17 + 1.0;\n    u_xlat16_17 = u_xlat16_17 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_6.xyz * vec3(u_xlat16_17);\n    u_xlatb36 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb36){\n        u_xlatb36 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb36){\n            u_xlat36 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n            u_xlat36 = inversesqrt(u_xlat36);\n            u_xlat7.xyz = vec3(u_xlat36) * u_xlat16_16.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat36 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat36 = min(u_xlat8.z, u_xlat36);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_16.xyz;\n        }\n        u_xlat10_7 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_5.x);\n        u_xlat16_16.x = u_xlat10_7.w + -1.0;\n        u_xlat16_16.x = unity_SpecCube1_HDR.w * u_xlat16_16.x + 1.0;\n        u_xlat16_16.x = u_xlat16_16.x * unity_SpecCube1_HDR.x;\n        u_xlat16_16.xyz = u_xlat10_7.xyz * u_xlat16_16.xxx;\n        u_xlat6.xyz = vec3(u_xlat16_17) * u_xlat10_6.xyz + (-u_xlat16_16.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat16_16.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_16.xyz = u_xlat16_4.xxx * u_xlat16_10.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * u_xlat2.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat6.xyz = vec3(u_xlat36) * u_xlat6.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat2.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat6.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat12 + u_xlat12;\n    u_xlat16_5.x = u_xlat12 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat3 + -0.5;\n    u_xlat16_17 = (-u_xlat2.x) + 1.0;\n    u_xlat16_29 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_29;\n    u_xlat16_17 = u_xlat16_5.x * u_xlat16_17 + 1.0;\n    u_xlat16_29 = -abs(u_xlat36) + 1.0;\n    u_xlat16_41 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_41;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_29 + 1.0;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_17;\n    u_xlat24 = u_xlat2.x * u_xlat16_5.x;\n    u_xlat14.x = u_xlat3 * u_xlat3;\n    u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat26 = (-u_xlat14.x) + 1.0;\n    u_xlat38 = abs(u_xlat36) * u_xlat26 + u_xlat14.x;\n    u_xlat26 = u_xlat2.x * u_xlat26 + u_xlat14.x;\n    u_xlat36 = abs(u_xlat36) * u_xlat26;\n    u_xlat36 = u_xlat2.x * u_xlat38 + u_xlat36;\n    u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n    u_xlat26 = u_xlat14.x * u_xlat14.x;\n    u_xlat38 = u_xlat0.x * u_xlat26 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat38 * u_xlat0.x + 1.0;\n    u_xlat26 = u_xlat26 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat26 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat2.x * u_xlat0.x;\n    u_xlat36 = u_xlat14.x * u_xlat3;\n    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;\n    u_xlat16_5.x = dot(_SpecColor.xyz, _SpecColor.xyz);\n    u_xlatb2 = u_xlat16_5.x!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat2.x;\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_1 = u_xlat16_1 + _Glossiness;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_5.xyw = vec3(u_xlat24) * _LightColor0.xyz;\n    u_xlat16_5.xyw = u_xlat15.xyz * u_xlat16_4.xxx + u_xlat16_5.xyw;\n    u_xlat2.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_4.x = (-u_xlat12) + 1.0;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10.x;\n    u_xlat16_10.xyz = (-_SpecColor.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_4.xxx + _SpecColor.xyz;\n    u_xlat0.xyz = u_xlat2.xyz * u_xlat16_10.xyz;\n    u_xlat0.xyz = u_xlat16_13.xyz * u_xlat16_5.xyw + u_xlat0.xyz;\n    u_xlat16_13.xyz = u_xlat16_16.xyz * vec3(u_xlat36);\n    u_xlat16_4.xyz = vec3(u_xlat16_1) + (-_SpecColor.xyz);\n    u_xlat16_4.xyz = vec3(u_xlat16_29) * u_xlat16_4.xyz + _SpecColor.xyz;\n    u_xlat0.xyz = u_xlat16_13.xyz * u_xlat16_4.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nbool u_xlatb2;\nfloat u_xlat3;\nmediump float u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nmediump vec3 u_xlat16_13;\nvec3 u_xlat14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_16;\nmediump float u_xlat16_17;\nfloat u_xlat24;\nfloat u_xlat26;\nmediump float u_xlat16_29;\nfloat u_xlat36;\nbool u_xlatb36;\nfloat u_xlat38;\nmediump float u_xlat16_41;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_1 = max(_SpecColor.y, _SpecColor.x);\n    u_xlat16_1 = max(u_xlat16_1, _SpecColor.z);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_13.xyz = u_xlat0.xyz * vec3(u_xlat16_1);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat14.xyz = u_xlat2.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_4.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_4.x = u_xlat16_3 * _OcclusionStrength + u_xlat16_4.x;\n    u_xlat3 = (-_Glossiness) + 1.0;\n    u_xlat16_16.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;\n    u_xlat16_16.xyz = u_xlat0.xyz * (-u_xlat16_16.xxx) + u_xlat14.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat15.xyz = log2(u_xlat16_5.xyz);\n    u_xlat15.xyz = u_xlat15.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat15.xyz = exp2(u_xlat15.xyz);\n    u_xlat15.xyz = u_xlat15.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat15.xyz = max(u_xlat15.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb36 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb36){\n        u_xlat36 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n        u_xlat36 = inversesqrt(u_xlat36);\n        u_xlat6.xyz = vec3(u_xlat36) * u_xlat16_16.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat7;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n            u_xlat7 = hlslcc_movcTemp;\n        }\n        u_xlat36 = min(u_xlat7.y, u_xlat7.x);\n        u_xlat36 = min(u_xlat7.z, u_xlat36);\n        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat7.xyz;\n    } else {\n        u_xlat6.xyz = u_xlat16_16.xyz;\n    }\n    u_xlat16_5.x = (-u_xlat3) * 0.699999988 + 1.70000005;\n    u_xlat16_5.x = u_xlat3 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * 6.0;\n    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat16_5.x);\n    u_xlat16_17 = u_xlat16_6.w + -1.0;\n    u_xlat16_17 = unity_SpecCube0_HDR.w * u_xlat16_17 + 1.0;\n    u_xlat16_17 = u_xlat16_17 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat16_6.xyz * vec3(u_xlat16_17);\n    u_xlatb36 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb36){\n        u_xlatb36 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb36){\n            u_xlat36 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n            u_xlat36 = inversesqrt(u_xlat36);\n            u_xlat7.xyz = vec3(u_xlat36) * u_xlat16_16.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat36 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat36 = min(u_xlat8.z, u_xlat36);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_16.xyz;\n        }\n        u_xlat16_7 = textureLod(unity_SpecCube1, u_xlat7.xyz, u_xlat16_5.x);\n        u_xlat16_16.x = u_xlat16_7.w + -1.0;\n        u_xlat16_16.x = unity_SpecCube1_HDR.w * u_xlat16_16.x + 1.0;\n        u_xlat16_16.x = u_xlat16_16.x * unity_SpecCube1_HDR.x;\n        u_xlat16_16.xyz = u_xlat16_7.xyz * u_xlat16_16.xxx;\n        u_xlat6.xyz = vec3(u_xlat16_17) * u_xlat16_6.xyz + (-u_xlat16_16.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat16_16.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_16.xyz = u_xlat16_4.xxx * u_xlat16_10.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * u_xlat2.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat6.xyz = vec3(u_xlat36) * u_xlat6.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat2.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat6.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat12 + u_xlat12;\n    u_xlat16_5.x = u_xlat12 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat3 + -0.5;\n    u_xlat16_17 = (-u_xlat2.x) + 1.0;\n    u_xlat16_29 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_29;\n    u_xlat16_17 = u_xlat16_5.x * u_xlat16_17 + 1.0;\n    u_xlat16_29 = -abs(u_xlat36) + 1.0;\n    u_xlat16_41 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_41;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_29 + 1.0;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_17;\n    u_xlat24 = u_xlat2.x * u_xlat16_5.x;\n    u_xlat14.x = u_xlat3 * u_xlat3;\n    u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat26 = (-u_xlat14.x) + 1.0;\n    u_xlat38 = abs(u_xlat36) * u_xlat26 + u_xlat14.x;\n    u_xlat26 = u_xlat2.x * u_xlat26 + u_xlat14.x;\n    u_xlat36 = abs(u_xlat36) * u_xlat26;\n    u_xlat36 = u_xlat2.x * u_xlat38 + u_xlat36;\n    u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n    u_xlat26 = u_xlat14.x * u_xlat14.x;\n    u_xlat38 = u_xlat0.x * u_xlat26 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat38 * u_xlat0.x + 1.0;\n    u_xlat26 = u_xlat26 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat26 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat2.x * u_xlat0.x;\n    u_xlat36 = u_xlat14.x * u_xlat3;\n    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;\n    u_xlat16_5.x = dot(_SpecColor.xyz, _SpecColor.xyz);\n    u_xlatb2 = u_xlat16_5.x!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat2.x;\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_1 = u_xlat16_1 + _Glossiness;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_5.xyw = vec3(u_xlat24) * _LightColor0.xyz;\n    u_xlat16_5.xyw = u_xlat15.xyz * u_xlat16_4.xxx + u_xlat16_5.xyw;\n    u_xlat2.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_4.x = (-u_xlat12) + 1.0;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10.x;\n    u_xlat16_10.xyz = (-_SpecColor.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_4.xxx + _SpecColor.xyz;\n    u_xlat0.xyz = u_xlat2.xyz * u_xlat16_10.xyz;\n    u_xlat0.xyz = u_xlat16_13.xyz * u_xlat16_5.xyw + u_xlat0.xyz;\n    u_xlat16_13.xyz = u_xlat16_16.xyz * vec3(u_xlat36);\n    u_xlat16_4.xyz = vec3(u_xlat16_1) + (-_SpecColor.xyz);\n    u_xlat16_4.xyz = vec3(u_xlat16_29) * u_xlat16_4.xyz + _SpecColor.xyz;\n    u_xlat0.xyz = u_xlat16_13.xyz * u_xlat16_4.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat16_2.xyz);\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = 0.0;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _SpecGlossMap;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nmediump float u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nbool u_xlatb5;\nvec3 u_xlat6;\nlowp vec4 u_xlat10_6;\nbool u_xlatb6;\nvec3 u_xlat7;\nlowp vec4 u_xlat10_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_16;\nfloat u_xlat17;\nfloat u_xlat25;\nmediump float u_xlat16_27;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nfloat u_xlat41;\nlowp float u_xlat10_41;\nfloat u_xlat42;\nbool u_xlatb42;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_SpecGlossMap, vs_TEXCOORD0.xy);\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_2 = max(u_xlat10_0.y, u_xlat10_0.x);\n    u_xlat16_2 = max(u_xlat10_0.z, u_xlat16_2);\n    u_xlat16_2 = (-u_xlat16_2) + 1.0;\n    u_xlat16_14.xyz = u_xlat1.xyz * vec3(u_xlat16_2);\n    u_xlat10_1.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy).yw;\n    u_xlat16_3.xy = u_xlat10_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_27 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_27 = min(u_xlat16_27, 1.0);\n    u_xlat16_27 = (-u_xlat16_27) + 1.0;\n    u_xlat16_27 = sqrt(u_xlat16_27);\n    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_BumpScale);\n    u_xlat16_4.xyz = u_xlat16_3.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_3.xyw = vs_TEXCOORD2.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat16_27) + u_xlat16_3.xyw;\n    u_xlat1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_3.xyz;\n    u_xlat37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = vec3(u_xlat37) * vs_TEXCOORD1.xyz;\n    u_xlat10_41 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_41 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat41 = (-u_xlat10_0.w) * _GlossMapScale + 1.0;\n    u_xlat16_15.x = dot(u_xlat5.xyz, u_xlat1.xyz);\n    u_xlat16_15.x = u_xlat16_15.x + u_xlat16_15.x;\n    u_xlat16_15.xyz = u_xlat1.xyz * (-u_xlat16_15.xxx) + u_xlat5.xyz;\n    u_xlatb6 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb6){\n        u_xlat6.x = dot(u_xlat16_15.xyz, u_xlat16_15.xyz);\n        u_xlat6.x = inversesqrt(u_xlat6.x);\n        u_xlat6.xyz = u_xlat16_15.xyz * u_xlat6.xxx;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat7;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n            u_xlat7 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat7.y, u_xlat7.x);\n        u_xlat42 = min(u_xlat7.z, u_xlat42);\n        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat42) + u_xlat7.xyz;\n    } else {\n        u_xlat6.xyz = u_xlat16_15.xyz;\n    }\n    u_xlat16_4.x = (-u_xlat41) * 0.699999988 + 1.70000005;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat41;\n    u_xlat16_4.x = u_xlat16_4.x * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat6.xyz, u_xlat16_4.x);\n    u_xlat16_16 = u_xlat10_6.w + -1.0;\n    u_xlat16_16 = unity_SpecCube0_HDR.w * u_xlat16_16 + 1.0;\n    u_xlat16_16 = u_xlat16_16 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_6.xyz * vec3(u_xlat16_16);\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_15.xyz, u_xlat16_15.xyz);\n            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = u_xlat16_15.xyz * vec3(u_xlat42);\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_15.xyz;\n        }\n        u_xlat10_7 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_4.x);\n        u_xlat16_15.x = u_xlat10_7.w + -1.0;\n        u_xlat16_15.x = unity_SpecCube1_HDR.w * u_xlat16_15.x + 1.0;\n        u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube1_HDR.x;\n        u_xlat16_15.xyz = u_xlat10_7.xyz * u_xlat16_15.xxx;\n        u_xlat6.xyz = vec3(u_xlat16_16) * u_xlat10_6.xyz + (-u_xlat16_15.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat16_15.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat37) + _WorldSpaceLightPos0.xyz;\n    u_xlat37 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz;\n    u_xlat37 = dot(u_xlat1.xyz, (-u_xlat5.xyz));\n    u_xlat5.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat6.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_39 = u_xlat13 + u_xlat13;\n    u_xlat16_39 = u_xlat13 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat41 + -0.5;\n    u_xlat16_4.x = (-u_xlat5.x) + 1.0;\n    u_xlat16_16 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_16;\n    u_xlat16_4.x = u_xlat16_39 * u_xlat16_4.x + 1.0;\n    u_xlat16_16 = -abs(u_xlat37) + 1.0;\n    u_xlat16_28 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_28;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_16 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_4.x;\n    u_xlat25 = u_xlat5.x * u_xlat16_39;\n    u_xlat17 = u_xlat41 * u_xlat41;\n    u_xlat17 = max(u_xlat17, 0.00200000009);\n    u_xlat29 = (-u_xlat17) + 1.0;\n    u_xlat6.x = abs(u_xlat37) * u_xlat29 + u_xlat17;\n    u_xlat29 = u_xlat5.x * u_xlat29 + u_xlat17;\n    u_xlat37 = abs(u_xlat37) * u_xlat29;\n    u_xlat37 = u_xlat5.x * u_xlat6.x + u_xlat37;\n    u_xlat37 = u_xlat37 + 9.99999975e-06;\n    u_xlat37 = 0.5 / u_xlat37;\n    u_xlat29 = u_xlat17 * u_xlat17;\n    u_xlat6.x = u_xlat1.x * u_xlat29 + (-u_xlat1.x);\n    u_xlat1.x = u_xlat6.x * u_xlat1.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat1.x = u_xlat29 / u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat37;\n    u_xlat1.x = u_xlat1.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat5.x * u_xlat1.x;\n    u_xlat37 = u_xlat17 * u_xlat41;\n    u_xlat37 = (-u_xlat37) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat10_0.xyz, u_xlat10_0.xyz);\n    u_xlatb5 = u_xlat16_39!=0.0;\n    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);\n    u_xlat1.x = u_xlat1.x * u_xlat5.x;\n    u_xlat16_2 = (-u_xlat16_2) + 1.0;\n    u_xlat16_2 = u_xlat10_0.w * _GlossMapScale + u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_4.xzw = vec3(u_xlat25) * _LightColor0.xyz;\n    u_xlat5.xyz = u_xlat1.xxx * _LightColor0.xyz;\n    u_xlat16_39 = (-u_xlat13) + 1.0;\n    u_xlat16_10.x = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_10.x;\n    u_xlat16_10.xyz = (-u_xlat10_0.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(u_xlat16_39) + u_xlat10_0.xyz;\n    u_xlat1.xyz = u_xlat5.xyz * u_xlat16_10.xyz;\n    u_xlat1.xyz = u_xlat16_14.xyz * u_xlat16_4.xzw + u_xlat1.xyz;\n    u_xlat16_14.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.xyz = (-u_xlat10_0.xyz) + vec3(u_xlat16_2);\n    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz + u_xlat10_0.xyz;\n    u_xlat0.xyz = u_xlat16_14.xyz * u_xlat16_3.xyz + u_xlat1.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nin mediump vec4 in_TANGENT0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat16_2.xyz);\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = 0.0;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _SpecGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(5) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump float u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nbool u_xlatb5;\nvec3 u_xlat6;\nmediump vec4 u_xlat16_6;\nbool u_xlatb6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_16;\nfloat u_xlat17;\nfloat u_xlat25;\nmediump float u_xlat16_27;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nfloat u_xlat41;\nmediump float u_xlat16_41;\nfloat u_xlat42;\nbool u_xlatb42;\nvoid main()\n{\n    u_xlat16_0 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_2 = max(u_xlat16_0.y, u_xlat16_0.x);\n    u_xlat16_2 = max(u_xlat16_0.z, u_xlat16_2);\n    u_xlat16_2 = (-u_xlat16_2) + 1.0;\n    u_xlat16_14.xyz = u_xlat1.xyz * vec3(u_xlat16_2);\n    u_xlat16_1.xy = texture(_BumpMap, vs_TEXCOORD0.xy).yw;\n    u_xlat16_3.xy = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_27 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_27 = min(u_xlat16_27, 1.0);\n    u_xlat16_27 = (-u_xlat16_27) + 1.0;\n    u_xlat16_27 = sqrt(u_xlat16_27);\n    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_BumpScale);\n    u_xlat16_4.xyz = u_xlat16_3.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_3.xyw = vs_TEXCOORD2.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat16_27) + u_xlat16_3.xyw;\n    u_xlat1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_3.xyz;\n    u_xlat37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = vec3(u_xlat37) * vs_TEXCOORD1.xyz;\n    u_xlat16_41 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_41 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat41 = (-u_xlat16_0.w) * _GlossMapScale + 1.0;\n    u_xlat16_15.x = dot(u_xlat5.xyz, u_xlat1.xyz);\n    u_xlat16_15.x = u_xlat16_15.x + u_xlat16_15.x;\n    u_xlat16_15.xyz = u_xlat1.xyz * (-u_xlat16_15.xxx) + u_xlat5.xyz;\n    u_xlatb6 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb6){\n        u_xlat6.x = dot(u_xlat16_15.xyz, u_xlat16_15.xyz);\n        u_xlat6.x = inversesqrt(u_xlat6.x);\n        u_xlat6.xyz = u_xlat16_15.xyz * u_xlat6.xxx;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat7;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n            u_xlat7 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat7.y, u_xlat7.x);\n        u_xlat42 = min(u_xlat7.z, u_xlat42);\n        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat42) + u_xlat7.xyz;\n    } else {\n        u_xlat6.xyz = u_xlat16_15.xyz;\n    }\n    u_xlat16_4.x = (-u_xlat41) * 0.699999988 + 1.70000005;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat41;\n    u_xlat16_4.x = u_xlat16_4.x * 6.0;\n    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat16_4.x);\n    u_xlat16_16 = u_xlat16_6.w + -1.0;\n    u_xlat16_16 = unity_SpecCube0_HDR.w * u_xlat16_16 + 1.0;\n    u_xlat16_16 = u_xlat16_16 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat16_6.xyz * vec3(u_xlat16_16);\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_15.xyz, u_xlat16_15.xyz);\n            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = u_xlat16_15.xyz * vec3(u_xlat42);\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_15.xyz;\n        }\n        u_xlat16_7 = textureLod(unity_SpecCube1, u_xlat7.xyz, u_xlat16_4.x);\n        u_xlat16_15.x = u_xlat16_7.w + -1.0;\n        u_xlat16_15.x = unity_SpecCube1_HDR.w * u_xlat16_15.x + 1.0;\n        u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube1_HDR.x;\n        u_xlat16_15.xyz = u_xlat16_7.xyz * u_xlat16_15.xxx;\n        u_xlat6.xyz = vec3(u_xlat16_16) * u_xlat16_6.xyz + (-u_xlat16_15.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat16_15.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat37) + _WorldSpaceLightPos0.xyz;\n    u_xlat37 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz;\n    u_xlat37 = dot(u_xlat1.xyz, (-u_xlat5.xyz));\n    u_xlat5.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat6.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_39 = u_xlat13 + u_xlat13;\n    u_xlat16_39 = u_xlat13 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat41 + -0.5;\n    u_xlat16_4.x = (-u_xlat5.x) + 1.0;\n    u_xlat16_16 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_16;\n    u_xlat16_4.x = u_xlat16_39 * u_xlat16_4.x + 1.0;\n    u_xlat16_16 = -abs(u_xlat37) + 1.0;\n    u_xlat16_28 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_28;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_16 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_4.x;\n    u_xlat25 = u_xlat5.x * u_xlat16_39;\n    u_xlat17 = u_xlat41 * u_xlat41;\n    u_xlat17 = max(u_xlat17, 0.00200000009);\n    u_xlat29 = (-u_xlat17) + 1.0;\n    u_xlat6.x = abs(u_xlat37) * u_xlat29 + u_xlat17;\n    u_xlat29 = u_xlat5.x * u_xlat29 + u_xlat17;\n    u_xlat37 = abs(u_xlat37) * u_xlat29;\n    u_xlat37 = u_xlat5.x * u_xlat6.x + u_xlat37;\n    u_xlat37 = u_xlat37 + 9.99999975e-06;\n    u_xlat37 = 0.5 / u_xlat37;\n    u_xlat29 = u_xlat17 * u_xlat17;\n    u_xlat6.x = u_xlat1.x * u_xlat29 + (-u_xlat1.x);\n    u_xlat1.x = u_xlat6.x * u_xlat1.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat1.x = u_xlat29 / u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat37;\n    u_xlat1.x = u_xlat1.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat5.x * u_xlat1.x;\n    u_xlat37 = u_xlat17 * u_xlat41;\n    u_xlat37 = (-u_xlat37) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);\n    u_xlatb5 = u_xlat16_39!=0.0;\n    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);\n    u_xlat1.x = u_xlat1.x * u_xlat5.x;\n    u_xlat16_2 = (-u_xlat16_2) + 1.0;\n    u_xlat16_2 = u_xlat16_0.w * _GlossMapScale + u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_4.xzw = vec3(u_xlat25) * _LightColor0.xyz;\n    u_xlat5.xyz = u_xlat1.xxx * _LightColor0.xyz;\n    u_xlat16_39 = (-u_xlat13) + 1.0;\n    u_xlat16_10.x = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_10.x;\n    u_xlat16_10.xyz = (-u_xlat16_0.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(u_xlat16_39) + u_xlat16_0.xyz;\n    u_xlat1.xyz = u_xlat5.xyz * u_xlat16_10.xyz;\n    u_xlat1.xyz = u_xlat16_14.xyz * u_xlat16_4.xzw + u_xlat1.xyz;\n    u_xlat16_14.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.xyz = (-u_xlat16_0.xyz) + vec3(u_xlat16_2);\n    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz + u_xlat16_0.xyz;\n    u_xlat0.xyz = u_xlat16_14.xyz * u_xlat16_3.xyz + u_xlat1.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat16_2.xyz);\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = 0.0;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _SpecGlossMap;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nmediump float u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nbool u_xlatb5;\nvec3 u_xlat6;\nlowp vec4 u_xlat10_6;\nbool u_xlatb6;\nvec3 u_xlat7;\nlowp vec4 u_xlat10_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_16;\nfloat u_xlat17;\nfloat u_xlat25;\nmediump float u_xlat16_27;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nfloat u_xlat41;\nlowp float u_xlat10_41;\nfloat u_xlat42;\nbool u_xlatb42;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_SpecGlossMap, vs_TEXCOORD0.xy);\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_2 = max(u_xlat10_0.y, u_xlat10_0.x);\n    u_xlat16_2 = max(u_xlat10_0.z, u_xlat16_2);\n    u_xlat16_2 = (-u_xlat16_2) + 1.0;\n    u_xlat16_14.xyz = u_xlat1.xyz * vec3(u_xlat16_2);\n    u_xlat10_1.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy).yw;\n    u_xlat16_3.xy = u_xlat10_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_27 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_27 = min(u_xlat16_27, 1.0);\n    u_xlat16_27 = (-u_xlat16_27) + 1.0;\n    u_xlat16_27 = sqrt(u_xlat16_27);\n    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_BumpScale);\n    u_xlat16_4.xyz = u_xlat16_3.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_3.xyw = vs_TEXCOORD2.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat16_27) + u_xlat16_3.xyw;\n    u_xlat1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_3.xyz;\n    u_xlat37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = vec3(u_xlat37) * vs_TEXCOORD1.xyz;\n    u_xlat10_41 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_41 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat41 = (-u_xlat10_0.w) * _GlossMapScale + 1.0;\n    u_xlat16_15.x = dot(u_xlat5.xyz, u_xlat1.xyz);\n    u_xlat16_15.x = u_xlat16_15.x + u_xlat16_15.x;\n    u_xlat16_15.xyz = u_xlat1.xyz * (-u_xlat16_15.xxx) + u_xlat5.xyz;\n    u_xlatb6 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb6){\n        u_xlat6.x = dot(u_xlat16_15.xyz, u_xlat16_15.xyz);\n        u_xlat6.x = inversesqrt(u_xlat6.x);\n        u_xlat6.xyz = u_xlat16_15.xyz * u_xlat6.xxx;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat7;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n            u_xlat7 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat7.y, u_xlat7.x);\n        u_xlat42 = min(u_xlat7.z, u_xlat42);\n        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat42) + u_xlat7.xyz;\n    } else {\n        u_xlat6.xyz = u_xlat16_15.xyz;\n    }\n    u_xlat16_4.x = (-u_xlat41) * 0.699999988 + 1.70000005;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat41;\n    u_xlat16_4.x = u_xlat16_4.x * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat6.xyz, u_xlat16_4.x);\n    u_xlat16_16 = u_xlat10_6.w + -1.0;\n    u_xlat16_16 = unity_SpecCube0_HDR.w * u_xlat16_16 + 1.0;\n    u_xlat16_16 = u_xlat16_16 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_6.xyz * vec3(u_xlat16_16);\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_15.xyz, u_xlat16_15.xyz);\n            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = u_xlat16_15.xyz * vec3(u_xlat42);\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_15.xyz;\n        }\n        u_xlat10_7 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_4.x);\n        u_xlat16_15.x = u_xlat10_7.w + -1.0;\n        u_xlat16_15.x = unity_SpecCube1_HDR.w * u_xlat16_15.x + 1.0;\n        u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube1_HDR.x;\n        u_xlat16_15.xyz = u_xlat10_7.xyz * u_xlat16_15.xxx;\n        u_xlat6.xyz = vec3(u_xlat16_16) * u_xlat10_6.xyz + (-u_xlat16_15.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat16_15.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat37) + _WorldSpaceLightPos0.xyz;\n    u_xlat37 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz;\n    u_xlat37 = dot(u_xlat1.xyz, (-u_xlat5.xyz));\n    u_xlat5.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat6.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_39 = u_xlat13 + u_xlat13;\n    u_xlat16_39 = u_xlat13 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat41 + -0.5;\n    u_xlat16_4.x = (-u_xlat5.x) + 1.0;\n    u_xlat16_16 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_16;\n    u_xlat16_4.x = u_xlat16_39 * u_xlat16_4.x + 1.0;\n    u_xlat16_16 = -abs(u_xlat37) + 1.0;\n    u_xlat16_28 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_28;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_16 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_4.x;\n    u_xlat25 = u_xlat5.x * u_xlat16_39;\n    u_xlat17 = u_xlat41 * u_xlat41;\n    u_xlat17 = max(u_xlat17, 0.00200000009);\n    u_xlat29 = (-u_xlat17) + 1.0;\n    u_xlat6.x = abs(u_xlat37) * u_xlat29 + u_xlat17;\n    u_xlat29 = u_xlat5.x * u_xlat29 + u_xlat17;\n    u_xlat37 = abs(u_xlat37) * u_xlat29;\n    u_xlat37 = u_xlat5.x * u_xlat6.x + u_xlat37;\n    u_xlat37 = u_xlat37 + 9.99999975e-06;\n    u_xlat37 = 0.5 / u_xlat37;\n    u_xlat29 = u_xlat17 * u_xlat17;\n    u_xlat6.x = u_xlat1.x * u_xlat29 + (-u_xlat1.x);\n    u_xlat1.x = u_xlat6.x * u_xlat1.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat1.x = u_xlat29 / u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat37;\n    u_xlat1.x = u_xlat1.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat5.x * u_xlat1.x;\n    u_xlat37 = u_xlat17 * u_xlat41;\n    u_xlat37 = (-u_xlat37) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat10_0.xyz, u_xlat10_0.xyz);\n    u_xlatb5 = u_xlat16_39!=0.0;\n    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);\n    u_xlat1.x = u_xlat1.x * u_xlat5.x;\n    u_xlat16_2 = (-u_xlat16_2) + 1.0;\n    u_xlat16_2 = u_xlat10_0.w * _GlossMapScale + u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_4.xzw = vec3(u_xlat25) * _LightColor0.xyz;\n    u_xlat5.xyz = u_xlat1.xxx * _LightColor0.xyz;\n    u_xlat16_39 = (-u_xlat13) + 1.0;\n    u_xlat16_10.x = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_10.x;\n    u_xlat16_10.xyz = (-u_xlat10_0.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(u_xlat16_39) + u_xlat10_0.xyz;\n    u_xlat1.xyz = u_xlat5.xyz * u_xlat16_10.xyz;\n    u_xlat1.xyz = u_xlat16_14.xyz * u_xlat16_4.xzw + u_xlat1.xyz;\n    u_xlat16_14.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.xyz = (-u_xlat10_0.xyz) + vec3(u_xlat16_2);\n    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz + u_xlat10_0.xyz;\n    u_xlat0.xyz = u_xlat16_14.xyz * u_xlat16_3.xyz + u_xlat1.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nin mediump vec4 in_TANGENT0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat16_2.xyz);\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = 0.0;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _SpecGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(5) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(6) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump float u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nbool u_xlatb5;\nvec3 u_xlat6;\nmediump vec4 u_xlat16_6;\nbool u_xlatb6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_16;\nfloat u_xlat17;\nfloat u_xlat25;\nmediump float u_xlat16_27;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nfloat u_xlat41;\nmediump float u_xlat16_41;\nfloat u_xlat42;\nbool u_xlatb42;\nvoid main()\n{\n    u_xlat16_0 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_2 = max(u_xlat16_0.y, u_xlat16_0.x);\n    u_xlat16_2 = max(u_xlat16_0.z, u_xlat16_2);\n    u_xlat16_2 = (-u_xlat16_2) + 1.0;\n    u_xlat16_14.xyz = u_xlat1.xyz * vec3(u_xlat16_2);\n    u_xlat16_1.xy = texture(_BumpMap, vs_TEXCOORD0.xy).yw;\n    u_xlat16_3.xy = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_27 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_27 = min(u_xlat16_27, 1.0);\n    u_xlat16_27 = (-u_xlat16_27) + 1.0;\n    u_xlat16_27 = sqrt(u_xlat16_27);\n    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_BumpScale);\n    u_xlat16_4.xyz = u_xlat16_3.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_3.xyw = vs_TEXCOORD2.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat16_27) + u_xlat16_3.xyw;\n    u_xlat1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_3.xyz;\n    u_xlat37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = vec3(u_xlat37) * vs_TEXCOORD1.xyz;\n    u_xlat16_41 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_41 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat41 = (-u_xlat16_0.w) * _GlossMapScale + 1.0;\n    u_xlat16_15.x = dot(u_xlat5.xyz, u_xlat1.xyz);\n    u_xlat16_15.x = u_xlat16_15.x + u_xlat16_15.x;\n    u_xlat16_15.xyz = u_xlat1.xyz * (-u_xlat16_15.xxx) + u_xlat5.xyz;\n    u_xlatb6 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb6){\n        u_xlat6.x = dot(u_xlat16_15.xyz, u_xlat16_15.xyz);\n        u_xlat6.x = inversesqrt(u_xlat6.x);\n        u_xlat6.xyz = u_xlat16_15.xyz * u_xlat6.xxx;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat7;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n            u_xlat7 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat7.y, u_xlat7.x);\n        u_xlat42 = min(u_xlat7.z, u_xlat42);\n        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat42) + u_xlat7.xyz;\n    } else {\n        u_xlat6.xyz = u_xlat16_15.xyz;\n    }\n    u_xlat16_4.x = (-u_xlat41) * 0.699999988 + 1.70000005;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat41;\n    u_xlat16_4.x = u_xlat16_4.x * 6.0;\n    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat16_4.x);\n    u_xlat16_16 = u_xlat16_6.w + -1.0;\n    u_xlat16_16 = unity_SpecCube0_HDR.w * u_xlat16_16 + 1.0;\n    u_xlat16_16 = u_xlat16_16 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat16_6.xyz * vec3(u_xlat16_16);\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_15.xyz, u_xlat16_15.xyz);\n            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = u_xlat16_15.xyz * vec3(u_xlat42);\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_15.xyz;\n        }\n        u_xlat16_7 = textureLod(unity_SpecCube1, u_xlat7.xyz, u_xlat16_4.x);\n        u_xlat16_15.x = u_xlat16_7.w + -1.0;\n        u_xlat16_15.x = unity_SpecCube1_HDR.w * u_xlat16_15.x + 1.0;\n        u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube1_HDR.x;\n        u_xlat16_15.xyz = u_xlat16_7.xyz * u_xlat16_15.xxx;\n        u_xlat6.xyz = vec3(u_xlat16_16) * u_xlat16_6.xyz + (-u_xlat16_15.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat16_15.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat37) + _WorldSpaceLightPos0.xyz;\n    u_xlat37 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat6.xyz = vec3(u_xlat37) * u_xlat6.xyz;\n    u_xlat37 = dot(u_xlat1.xyz, (-u_xlat5.xyz));\n    u_xlat5.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat6.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_39 = u_xlat13 + u_xlat13;\n    u_xlat16_39 = u_xlat13 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat41 + -0.5;\n    u_xlat16_4.x = (-u_xlat5.x) + 1.0;\n    u_xlat16_16 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_16;\n    u_xlat16_4.x = u_xlat16_39 * u_xlat16_4.x + 1.0;\n    u_xlat16_16 = -abs(u_xlat37) + 1.0;\n    u_xlat16_28 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_28;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_16 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_4.x;\n    u_xlat25 = u_xlat5.x * u_xlat16_39;\n    u_xlat17 = u_xlat41 * u_xlat41;\n    u_xlat17 = max(u_xlat17, 0.00200000009);\n    u_xlat29 = (-u_xlat17) + 1.0;\n    u_xlat6.x = abs(u_xlat37) * u_xlat29 + u_xlat17;\n    u_xlat29 = u_xlat5.x * u_xlat29 + u_xlat17;\n    u_xlat37 = abs(u_xlat37) * u_xlat29;\n    u_xlat37 = u_xlat5.x * u_xlat6.x + u_xlat37;\n    u_xlat37 = u_xlat37 + 9.99999975e-06;\n    u_xlat37 = 0.5 / u_xlat37;\n    u_xlat29 = u_xlat17 * u_xlat17;\n    u_xlat6.x = u_xlat1.x * u_xlat29 + (-u_xlat1.x);\n    u_xlat1.x = u_xlat6.x * u_xlat1.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat1.x = u_xlat29 / u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat37;\n    u_xlat1.x = u_xlat1.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat5.x * u_xlat1.x;\n    u_xlat37 = u_xlat17 * u_xlat41;\n    u_xlat37 = (-u_xlat37) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);\n    u_xlatb5 = u_xlat16_39!=0.0;\n    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);\n    u_xlat1.x = u_xlat1.x * u_xlat5.x;\n    u_xlat16_2 = (-u_xlat16_2) + 1.0;\n    u_xlat16_2 = u_xlat16_0.w * _GlossMapScale + u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_4.xzw = vec3(u_xlat25) * _LightColor0.xyz;\n    u_xlat5.xyz = u_xlat1.xxx * _LightColor0.xyz;\n    u_xlat16_39 = (-u_xlat13) + 1.0;\n    u_xlat16_10.x = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_10.x;\n    u_xlat16_10.xyz = (-u_xlat16_0.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(u_xlat16_39) + u_xlat16_0.xyz;\n    u_xlat1.xyz = u_xlat5.xyz * u_xlat16_10.xyz;\n    u_xlat1.xyz = u_xlat16_14.xyz * u_xlat16_4.xzw + u_xlat1.xyz;\n    u_xlat16_14.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.xyz = (-u_xlat16_0.xyz) + vec3(u_xlat16_2);\n    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz + u_xlat16_0.xyz;\n    u_xlat0.xyz = u_xlat16_14.xyz * u_xlat16_3.xyz + u_xlat1.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat16_2.xyz);\n    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = 0.0;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);\n    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _SpecGlossMap;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nmediump float u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nbool u_xlatb5;\nfloat u_xlat6;\nlowp float u_xlat10_6;\nvec3 u_xlat7;\nlowp vec4 u_xlat10_7;\nvec3 u_xlat8;\nlowp vec4 u_xlat10_8;\nvec3 u_xlat9;\nvec3 u_xlat10;\nbvec3 u_xlatb10;\nvec3 u_xlat11;\nmediump vec3 u_xlat16_11;\nbvec3 u_xlatb12;\nfloat u_xlat14;\nmediump vec3 u_xlat16_15;\nmediump vec3 u_xlat16_16;\nmediump float u_xlat16_17;\nvec3 u_xlat18;\nvec3 u_xlat19;\nfloat u_xlat27;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nfloat u_xlat40;\nbool u_xlatb40;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_SpecGlossMap, vs_TEXCOORD0.xy);\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_2 = max(u_xlat10_0.y, u_xlat10_0.x);\n    u_xlat16_2 = max(u_xlat10_0.z, u_xlat16_2);\n    u_xlat16_2 = (-u_xlat16_2) + 1.0;\n    u_xlat16_15.xyz = u_xlat1.xyz * vec3(u_xlat16_2);\n    u_xlat10_1.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy).yw;\n    u_xlat16_3.xy = u_xlat10_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_29 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_29 = min(u_xlat16_29, 1.0);\n    u_xlat16_29 = (-u_xlat16_29) + 1.0;\n    u_xlat16_29 = sqrt(u_xlat16_29);\n    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_BumpScale);\n    u_xlat16_4.xyz = u_xlat16_3.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_3.xyw = vs_TEXCOORD2.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat16_29) + u_xlat16_3.xyw;\n    u_xlat1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_3.xyz;\n    u_xlat5.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat18.xyz = u_xlat5.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_6 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_6 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat6 = (-u_xlat10_0.w) * _GlossMapScale + 1.0;\n    u_xlat16_16.x = dot(u_xlat18.xyz, u_xlat1.xyz);\n    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;\n    u_xlat16_16.xyz = u_xlat1.xyz * (-u_xlat16_16.xxx) + u_xlat18.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat19.xyz = log2(u_xlat16_4.xyz);\n    u_xlat19.xyz = u_xlat19.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat19.xyz = exp2(u_xlat19.xyz);\n    u_xlat19.xyz = u_xlat19.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat19.xyz = max(u_xlat19.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb40){\n        u_xlat40 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n        u_xlat40 = inversesqrt(u_xlat40);\n        u_xlat7.xyz = vec3(u_xlat40) * u_xlat16_16.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat40 = min(u_xlat8.z, u_xlat40);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_16.xyz;\n    }\n    u_xlat16_4.x = (-u_xlat6) * 0.699999988 + 1.70000005;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat6;\n    u_xlat16_4.x = u_xlat16_4.x * 6.0;\n    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_4.x);\n    u_xlat16_17 = u_xlat10_7.w + -1.0;\n    u_xlat16_17 = unity_SpecCube0_HDR.w * u_xlat16_17 + 1.0;\n    u_xlat16_17 = u_xlat16_17 * unity_SpecCube0_HDR.x;\n    u_xlat16_11.xyz = u_xlat10_7.xyz * vec3(u_xlat16_17);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat40 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n            u_xlat40 = inversesqrt(u_xlat40);\n            u_xlat8.xyz = vec3(u_xlat40) * u_xlat16_16.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat9;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat9.x : u_xlat10.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat9.y : u_xlat10.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat9.z : u_xlat10.z;\n                u_xlat9 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat9.y, u_xlat9.x);\n            u_xlat40 = min(u_xlat9.z, u_xlat40);\n            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat40) + u_xlat9.xyz;\n        } else {\n            u_xlat8.xyz = u_xlat16_16.xyz;\n        }\n        u_xlat10_8 = textureCubeLodEXT(unity_SpecCube1, u_xlat8.xyz, u_xlat16_4.x);\n        u_xlat16_16.x = u_xlat10_8.w + -1.0;\n        u_xlat16_16.x = unity_SpecCube1_HDR.w * u_xlat16_16.x + 1.0;\n        u_xlat16_16.x = u_xlat16_16.x * unity_SpecCube1_HDR.x;\n        u_xlat16_16.xyz = u_xlat10_8.xyz * u_xlat16_16.xxx;\n        u_xlat7.xyz = vec3(u_xlat16_17) * u_xlat10_7.xyz + (-u_xlat16_16.xyz);\n        u_xlat11.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_16.xyz;\n        u_xlat16_11.xyz = u_xlat11.xyz;\n    }\n    u_xlat16_16.xyz = u_xlat16_3.xxx * u_xlat16_11.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat5.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat40 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat40 = max(u_xlat40, 0.00100000005);\n    u_xlat40 = inversesqrt(u_xlat40);\n    u_xlat7.xyz = vec3(u_xlat40) * u_xlat7.xyz;\n    u_xlat40 = dot(u_xlat1.xyz, (-u_xlat18.xyz));\n    u_xlat5.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat7.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat14 + u_xlat14;\n    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat6 + -0.5;\n    u_xlat16_17 = (-u_xlat5.x) + 1.0;\n    u_xlat16_30 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_30;\n    u_xlat16_17 = u_xlat16_4.x * u_xlat16_17 + 1.0;\n    u_xlat16_30 = -abs(u_xlat40) + 1.0;\n    u_xlat16_43 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_43;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_30 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_17;\n    u_xlat27 = u_xlat5.x * u_xlat16_4.x;\n    u_xlat18.x = u_xlat6 * u_xlat6;\n    u_xlat18.x = max(u_xlat18.x, 0.00200000009);\n    u_xlat31 = (-u_xlat18.x) + 1.0;\n    u_xlat44 = abs(u_xlat40) * u_xlat31 + u_xlat18.x;\n    u_xlat31 = u_xlat5.x * u_xlat31 + u_xlat18.x;\n    u_xlat40 = abs(u_xlat40) * u_xlat31;\n    u_xlat40 = u_xlat5.x * u_xlat44 + u_xlat40;\n    u_xlat40 = u_xlat40 + 9.99999975e-06;\n    u_xlat40 = 0.5 / u_xlat40;\n    u_xlat31 = u_xlat18.x * u_xlat18.x;\n    u_xlat44 = u_xlat1.x * u_xlat31 + (-u_xlat1.x);\n    u_xlat1.x = u_xlat44 * u_xlat1.x + 1.0;\n    u_xlat31 = u_xlat31 * 0.318309873;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat1.x = u_xlat31 / u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat40;\n    u_xlat1.x = u_xlat1.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat5.x * u_xlat1.x;\n    u_xlat40 = u_xlat18.x * u_xlat6;\n    u_xlat40 = (-u_xlat40) * 0.280000001 + 1.0;\n    u_xlat16_4.x = dot(u_xlat10_0.xyz, u_xlat10_0.xyz);\n    u_xlatb5 = u_xlat16_4.x!=0.0;\n    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);\n    u_xlat1.x = u_xlat1.x * u_xlat5.x;\n    u_xlat16_2 = (-u_xlat16_2) + 1.0;\n    u_xlat16_2 = u_xlat10_0.w * _GlossMapScale + u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_4.xyw = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat16_4.xyw = u_xlat19.xyz * u_xlat16_3.xxx + u_xlat16_4.xyw;\n    u_xlat5.xyz = u_xlat1.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat14) + 1.0;\n    u_xlat16_11.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11.x;\n    u_xlat16_11.xyz = (-u_xlat10_0.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_3.xxx + u_xlat10_0.xyz;\n    u_xlat1.xyz = u_xlat5.xyz * u_xlat16_11.xyz;\n    u_xlat1.xyz = u_xlat16_15.xyz * u_xlat16_4.xyw + u_xlat1.xyz;\n    u_xlat16_15.xyz = u_xlat16_16.xyz * vec3(u_xlat40);\n    u_xlat16_3.xyz = (-u_xlat10_0.xyz) + vec3(u_xlat16_2);\n    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz + u_xlat10_0.xyz;\n    u_xlat0.xyz = u_xlat16_15.xyz * u_xlat16_3.xyz + u_xlat1.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nin mediump vec4 in_TANGENT0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat16_2.xyz);\n    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = 0.0;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);\n    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _SpecGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(5) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(6) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump float u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nbool u_xlatb5;\nfloat u_xlat6;\nmediump float u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec4 u_xlat16_8;\nvec3 u_xlat9;\nvec3 u_xlat10;\nbvec3 u_xlatb10;\nvec3 u_xlat11;\nmediump vec3 u_xlat16_11;\nbvec3 u_xlatb12;\nfloat u_xlat14;\nmediump vec3 u_xlat16_15;\nmediump vec3 u_xlat16_16;\nmediump float u_xlat16_17;\nvec3 u_xlat18;\nvec3 u_xlat19;\nfloat u_xlat27;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nfloat u_xlat40;\nbool u_xlatb40;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nvoid main()\n{\n    u_xlat16_0 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_2 = max(u_xlat16_0.y, u_xlat16_0.x);\n    u_xlat16_2 = max(u_xlat16_0.z, u_xlat16_2);\n    u_xlat16_2 = (-u_xlat16_2) + 1.0;\n    u_xlat16_15.xyz = u_xlat1.xyz * vec3(u_xlat16_2);\n    u_xlat16_1.xy = texture(_BumpMap, vs_TEXCOORD0.xy).yw;\n    u_xlat16_3.xy = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_29 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_29 = min(u_xlat16_29, 1.0);\n    u_xlat16_29 = (-u_xlat16_29) + 1.0;\n    u_xlat16_29 = sqrt(u_xlat16_29);\n    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_BumpScale);\n    u_xlat16_4.xyz = u_xlat16_3.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_3.xyw = vs_TEXCOORD2.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat16_29) + u_xlat16_3.xyw;\n    u_xlat1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_3.xyz;\n    u_xlat5.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat18.xyz = u_xlat5.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_6 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_6 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat6 = (-u_xlat16_0.w) * _GlossMapScale + 1.0;\n    u_xlat16_16.x = dot(u_xlat18.xyz, u_xlat1.xyz);\n    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;\n    u_xlat16_16.xyz = u_xlat1.xyz * (-u_xlat16_16.xxx) + u_xlat18.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat19.xyz = log2(u_xlat16_4.xyz);\n    u_xlat19.xyz = u_xlat19.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat19.xyz = exp2(u_xlat19.xyz);\n    u_xlat19.xyz = u_xlat19.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat19.xyz = max(u_xlat19.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb40){\n        u_xlat40 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n        u_xlat40 = inversesqrt(u_xlat40);\n        u_xlat7.xyz = vec3(u_xlat40) * u_xlat16_16.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat40 = min(u_xlat8.z, u_xlat40);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_16.xyz;\n    }\n    u_xlat16_4.x = (-u_xlat6) * 0.699999988 + 1.70000005;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat6;\n    u_xlat16_4.x = u_xlat16_4.x * 6.0;\n    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat16_4.x);\n    u_xlat16_17 = u_xlat16_7.w + -1.0;\n    u_xlat16_17 = unity_SpecCube0_HDR.w * u_xlat16_17 + 1.0;\n    u_xlat16_17 = u_xlat16_17 * unity_SpecCube0_HDR.x;\n    u_xlat16_11.xyz = u_xlat16_7.xyz * vec3(u_xlat16_17);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat40 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n            u_xlat40 = inversesqrt(u_xlat40);\n            u_xlat8.xyz = vec3(u_xlat40) * u_xlat16_16.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat9;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat9.x : u_xlat10.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat9.y : u_xlat10.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat9.z : u_xlat10.z;\n                u_xlat9 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat9.y, u_xlat9.x);\n            u_xlat40 = min(u_xlat9.z, u_xlat40);\n            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat40) + u_xlat9.xyz;\n        } else {\n            u_xlat8.xyz = u_xlat16_16.xyz;\n        }\n        u_xlat16_8 = textureLod(unity_SpecCube1, u_xlat8.xyz, u_xlat16_4.x);\n        u_xlat16_16.x = u_xlat16_8.w + -1.0;\n        u_xlat16_16.x = unity_SpecCube1_HDR.w * u_xlat16_16.x + 1.0;\n        u_xlat16_16.x = u_xlat16_16.x * unity_SpecCube1_HDR.x;\n        u_xlat16_16.xyz = u_xlat16_8.xyz * u_xlat16_16.xxx;\n        u_xlat7.xyz = vec3(u_xlat16_17) * u_xlat16_7.xyz + (-u_xlat16_16.xyz);\n        u_xlat11.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_16.xyz;\n        u_xlat16_11.xyz = u_xlat11.xyz;\n    }\n    u_xlat16_16.xyz = u_xlat16_3.xxx * u_xlat16_11.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat5.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat40 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat40 = max(u_xlat40, 0.00100000005);\n    u_xlat40 = inversesqrt(u_xlat40);\n    u_xlat7.xyz = vec3(u_xlat40) * u_xlat7.xyz;\n    u_xlat40 = dot(u_xlat1.xyz, (-u_xlat18.xyz));\n    u_xlat5.x = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat7.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat14 + u_xlat14;\n    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat6 + -0.5;\n    u_xlat16_17 = (-u_xlat5.x) + 1.0;\n    u_xlat16_30 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_30;\n    u_xlat16_17 = u_xlat16_4.x * u_xlat16_17 + 1.0;\n    u_xlat16_30 = -abs(u_xlat40) + 1.0;\n    u_xlat16_43 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_43;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_30 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_17;\n    u_xlat27 = u_xlat5.x * u_xlat16_4.x;\n    u_xlat18.x = u_xlat6 * u_xlat6;\n    u_xlat18.x = max(u_xlat18.x, 0.00200000009);\n    u_xlat31 = (-u_xlat18.x) + 1.0;\n    u_xlat44 = abs(u_xlat40) * u_xlat31 + u_xlat18.x;\n    u_xlat31 = u_xlat5.x * u_xlat31 + u_xlat18.x;\n    u_xlat40 = abs(u_xlat40) * u_xlat31;\n    u_xlat40 = u_xlat5.x * u_xlat44 + u_xlat40;\n    u_xlat40 = u_xlat40 + 9.99999975e-06;\n    u_xlat40 = 0.5 / u_xlat40;\n    u_xlat31 = u_xlat18.x * u_xlat18.x;\n    u_xlat44 = u_xlat1.x * u_xlat31 + (-u_xlat1.x);\n    u_xlat1.x = u_xlat44 * u_xlat1.x + 1.0;\n    u_xlat31 = u_xlat31 * 0.318309873;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat1.x = u_xlat31 / u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat40;\n    u_xlat1.x = u_xlat1.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat5.x * u_xlat1.x;\n    u_xlat40 = u_xlat18.x * u_xlat6;\n    u_xlat40 = (-u_xlat40) * 0.280000001 + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);\n    u_xlatb5 = u_xlat16_4.x!=0.0;\n    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);\n    u_xlat1.x = u_xlat1.x * u_xlat5.x;\n    u_xlat16_2 = (-u_xlat16_2) + 1.0;\n    u_xlat16_2 = u_xlat16_0.w * _GlossMapScale + u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_4.xyw = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat16_4.xyw = u_xlat19.xyz * u_xlat16_3.xxx + u_xlat16_4.xyw;\n    u_xlat5.xyz = u_xlat1.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat14) + 1.0;\n    u_xlat16_11.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11.x;\n    u_xlat16_11.xyz = (-u_xlat16_0.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_3.xxx + u_xlat16_0.xyz;\n    u_xlat1.xyz = u_xlat5.xyz * u_xlat16_11.xyz;\n    u_xlat1.xyz = u_xlat16_15.xyz * u_xlat16_4.xyw + u_xlat1.xyz;\n    u_xlat16_15.xyz = u_xlat16_16.xyz * vec3(u_xlat40);\n    u_xlat16_3.xyz = (-u_xlat16_0.xyz) + vec3(u_xlat16_2);\n    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz + u_xlat16_0.xyz;\n    u_xlat0.xyz = u_xlat16_15.xyz * u_xlat16_3.xyz + u_xlat1.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.w = u_xlat2.x;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat0.zxy;\n    u_xlat16_3.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat16_3.xyz);\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = u_xlat2.y;\n    vs_TEXCOORD4.w = u_xlat2.z;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _SpecGlossMap;\nuniform lowp sampler2D _BumpMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nlowp vec4 u_xlat10_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nbool u_xlatb3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat14;\nmediump float u_xlat16_15;\nmediump float u_xlat16_16;\nfloat u_xlat17;\nfloat u_xlat21;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nvoid main()\n{\n    u_xlat10_0.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy).yw;\n    u_xlat16_1.xy = u_xlat10_0.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_15 = dot(u_xlat16_1.xy, u_xlat16_1.xy);\n    u_xlat16_1.xy = u_xlat16_1.xy * vec2(_BumpScale);\n    u_xlat16_15 = min(u_xlat16_15, 1.0);\n    u_xlat16_15 = (-u_xlat16_15) + 1.0;\n    u_xlat16_15 = sqrt(u_xlat16_15);\n    u_xlat16_2.xyz = u_xlat16_1.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_1.xyw = vs_TEXCOORD2.xyz * u_xlat16_1.xxx + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat16_15) + u_xlat16_1.xyw;\n    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat3.xyz;\n    u_xlat5.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat5.xyz));\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);\n    u_xlat10_1 = texture2D(_SpecGlossMap, vs_TEXCOORD0.xy);\n    u_xlat14 = (-u_xlat10_1.w) * _GlossMapScale + 1.0;\n    u_xlat3.x = u_xlat14 * u_xlat14;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat10 = u_xlat3.x * u_xlat3.x;\n    u_xlat17 = u_xlat24 * u_xlat10 + (-u_xlat24);\n    u_xlat17 = u_xlat17 * u_xlat24 + 1.0;\n    u_xlat17 = u_xlat17 * u_xlat17 + 1.00000001e-07;\n    u_xlat10 = u_xlat10 * 0.318309873;\n    u_xlat10 = u_xlat10 / u_xlat17;\n    u_xlat17 = (-u_xlat3.x) + 1.0;\n    u_xlat24 = abs(u_xlat21) * u_xlat17 + u_xlat3.x;\n    u_xlat3.x = u_xlat0.x * u_xlat17 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat21) * u_xlat3.x;\n    u_xlat16_2.x = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat24 + u_xlat3.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat10 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat16_9.x = dot(u_xlat10_1.xyz, u_xlat10_1.xyz);\n    u_xlatb3 = u_xlat16_9.x!=0.0;\n    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat3.x;\n    u_xlat3.xyz = vec3(u_xlat21) * _LightColor0.xyz;\n    u_xlat16_9.x = (-u_xlat7) + 1.0;\n    u_xlat16_16 = u_xlat16_9.x * u_xlat16_9.x;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_16;\n    u_xlat16_6.xyz = (-u_xlat10_1.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_9.xxx + u_xlat10_1.xyz;\n    u_xlat3.xyz = u_xlat16_9.xyz * u_xlat3.xyz;\n    u_xlat16_9.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_9.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9.x;\n    u_xlat16_9.x = u_xlat7 + u_xlat7;\n    u_xlat16_9.x = u_xlat7 * u_xlat16_9.x;\n    u_xlat16_9.x = u_xlat16_9.x * u_xlat14 + -0.5;\n    u_xlat16_2.x = u_xlat16_9.x * u_xlat16_2.x + 1.0;\n    u_xlat16_16 = (-u_xlat0.x) + 1.0;\n    u_xlat16_23 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_23;\n    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_16 + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_23 = max(u_xlat10_1.y, u_xlat10_1.x);\n    u_xlat16_23 = max(u_xlat10_1.z, u_xlat16_23);\n    u_xlat16_23 = (-u_xlat16_23) + 1.0;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nin mediump vec4 in_TANGENT0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.w = u_xlat2.x;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat0.zxy;\n    u_xlat16_3.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat16_3.xyz);\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = u_xlat2.y;\n    vs_TEXCOORD4.w = u_xlat2.z;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _SpecGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nbool u_xlatb3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat14;\nmediump float u_xlat16_15;\nmediump float u_xlat16_16;\nfloat u_xlat17;\nfloat u_xlat21;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nvoid main()\n{\n    u_xlat16_0.xy = texture(_BumpMap, vs_TEXCOORD0.xy).yw;\n    u_xlat16_1.xy = u_xlat16_0.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_15 = dot(u_xlat16_1.xy, u_xlat16_1.xy);\n    u_xlat16_1.xy = u_xlat16_1.xy * vec2(_BumpScale);\n    u_xlat16_15 = min(u_xlat16_15, 1.0);\n    u_xlat16_15 = (-u_xlat16_15) + 1.0;\n    u_xlat16_15 = sqrt(u_xlat16_15);\n    u_xlat16_2.xyz = u_xlat16_1.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_1.xyw = vs_TEXCOORD2.xyz * u_xlat16_1.xxx + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat16_15) + u_xlat16_1.xyw;\n    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat3.xyz;\n    u_xlat5.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat5.xyz));\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);\n    u_xlat16_1 = texture(_SpecGlossMap, vs_TEXCOORD0.xy);\n    u_xlat14 = (-u_xlat16_1.w) * _GlossMapScale + 1.0;\n    u_xlat3.x = u_xlat14 * u_xlat14;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat10 = u_xlat3.x * u_xlat3.x;\n    u_xlat17 = u_xlat24 * u_xlat10 + (-u_xlat24);\n    u_xlat17 = u_xlat17 * u_xlat24 + 1.0;\n    u_xlat17 = u_xlat17 * u_xlat17 + 1.00000001e-07;\n    u_xlat10 = u_xlat10 * 0.318309873;\n    u_xlat10 = u_xlat10 / u_xlat17;\n    u_xlat17 = (-u_xlat3.x) + 1.0;\n    u_xlat24 = abs(u_xlat21) * u_xlat17 + u_xlat3.x;\n    u_xlat3.x = u_xlat0.x * u_xlat17 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat21) * u_xlat3.x;\n    u_xlat16_2.x = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat24 + u_xlat3.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat10 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat16_9.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlatb3 = u_xlat16_9.x!=0.0;\n    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat3.x;\n    u_xlat3.xyz = vec3(u_xlat21) * _LightColor0.xyz;\n    u_xlat16_9.x = (-u_xlat7) + 1.0;\n    u_xlat16_16 = u_xlat16_9.x * u_xlat16_9.x;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_16;\n    u_xlat16_6.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_9.xyz = u_xlat16_6.xyz * u_xlat16_9.xxx + u_xlat16_1.xyz;\n    u_xlat3.xyz = u_xlat16_9.xyz * u_xlat3.xyz;\n    u_xlat16_9.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_9.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9.x;\n    u_xlat16_9.x = u_xlat7 + u_xlat7;\n    u_xlat16_9.x = u_xlat7 * u_xlat16_9.x;\n    u_xlat16_9.x = u_xlat16_9.x * u_xlat14 + -0.5;\n    u_xlat16_2.x = u_xlat16_9.x * u_xlat16_2.x + 1.0;\n    u_xlat16_16 = (-u_xlat0.x) + 1.0;\n    u_xlat16_23 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_23;\n    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_16 + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_23 = max(u_xlat16_1.y, u_xlat16_1.x);\n    u_xlat16_23 = max(u_xlat16_1.z, u_xlat16_23);\n    u_xlat16_23 = (-u_xlat16_23) + 1.0;\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nmediump float u_xlat16_4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump float u_xlat16_16;\nmediump float u_xlat16_17;\nfloat u_xlat18;\nfloat u_xlat19;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat1.xyz;\n    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;\n    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat19 = max(u_xlat19, 0.00100000005);\n    u_xlat19 = inversesqrt(u_xlat19);\n    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;\n    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat12 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat12 * u_xlat12;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat7 = u_xlat1.x * u_xlat1.x;\n    u_xlat13 = u_xlat19 * u_xlat7 + (-u_xlat19);\n    u_xlat13 = u_xlat13 * u_xlat19 + 1.0;\n    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;\n    u_xlat7 = u_xlat7 * 0.318309873;\n    u_xlat7 = u_xlat7 / u_xlat13;\n    u_xlat13 = (-u_xlat1.x) + 1.0;\n    u_xlat19 = abs(u_xlat18) * u_xlat13 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat13 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat18) * u_xlat1.x;\n    u_xlat16_4 = -abs(u_xlat18) + 1.0;\n    u_xlat18 = u_xlat0.x * u_xlat19 + u_xlat1.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat18 = u_xlat7 * u_xlat18;\n    u_xlat18 = u_xlat18 * 3.14159274;\n    u_xlat18 = max(u_xlat18, 9.99999975e-05);\n    u_xlat18 = sqrt(u_xlat18);\n    u_xlat18 = u_xlat0.x * u_xlat18;\n    u_xlat16_10.x = dot(_SpecColor.xyz, _SpecColor.xyz);\n    u_xlatb1 = u_xlat16_10.x!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat18 = u_xlat18 * u_xlat1.x;\n    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;\n    u_xlat16_10.x = (-u_xlat6) + 1.0;\n    u_xlat16_16 = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_16;\n    u_xlat16_5.xyz = (-_SpecColor.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_10.xyz = u_xlat16_5.xyz * u_xlat16_10.xxx + _SpecColor.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_10.xyz;\n    u_xlat16_10.x = max(_SpecColor.y, _SpecColor.x);\n    u_xlat16_10.x = max(u_xlat16_10.x, _SpecColor.z);\n    u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat2.xyz;\n    u_xlat16_5.x = u_xlat16_4 * u_xlat16_4;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_4 = u_xlat16_4 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat6 + u_xlat6;\n    u_xlat16_5.x = u_xlat6 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat12 + -0.5;\n    u_xlat16_4 = u_xlat16_5.x * u_xlat16_4 + 1.0;\n    u_xlat16_11 = (-u_xlat0.x) + 1.0;\n    u_xlat16_17 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_17;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_11 + 1.0;\n    u_xlat16_4 = u_xlat16_4 * u_xlat16_5.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4;\n    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.xyz = u_xlat16_10.xyz * u_xlat16_5.xyz + u_xlat1.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump float u_xlat16_4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump float u_xlat16_16;\nmediump float u_xlat16_17;\nfloat u_xlat18;\nfloat u_xlat19;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat1.xyz;\n    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;\n    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat19 = max(u_xlat19, 0.00100000005);\n    u_xlat19 = inversesqrt(u_xlat19);\n    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;\n    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat12 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat12 * u_xlat12;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat7 = u_xlat1.x * u_xlat1.x;\n    u_xlat13 = u_xlat19 * u_xlat7 + (-u_xlat19);\n    u_xlat13 = u_xlat13 * u_xlat19 + 1.0;\n    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;\n    u_xlat7 = u_xlat7 * 0.318309873;\n    u_xlat7 = u_xlat7 / u_xlat13;\n    u_xlat13 = (-u_xlat1.x) + 1.0;\n    u_xlat19 = abs(u_xlat18) * u_xlat13 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat13 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat18) * u_xlat1.x;\n    u_xlat16_4 = -abs(u_xlat18) + 1.0;\n    u_xlat18 = u_xlat0.x * u_xlat19 + u_xlat1.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat18 = u_xlat7 * u_xlat18;\n    u_xlat18 = u_xlat18 * 3.14159274;\n    u_xlat18 = max(u_xlat18, 9.99999975e-05);\n    u_xlat18 = sqrt(u_xlat18);\n    u_xlat18 = u_xlat0.x * u_xlat18;\n    u_xlat16_10.x = dot(_SpecColor.xyz, _SpecColor.xyz);\n    u_xlatb1 = u_xlat16_10.x!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat18 = u_xlat18 * u_xlat1.x;\n    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;\n    u_xlat16_10.x = (-u_xlat6) + 1.0;\n    u_xlat16_16 = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_16;\n    u_xlat16_5.xyz = (-_SpecColor.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_10.xyz = u_xlat16_5.xyz * u_xlat16_10.xxx + _SpecColor.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_10.xyz;\n    u_xlat16_10.x = max(_SpecColor.y, _SpecColor.x);\n    u_xlat16_10.x = max(u_xlat16_10.x, _SpecColor.z);\n    u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;\n    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat2.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat2.xyz;\n    u_xlat16_5.x = u_xlat16_4 * u_xlat16_4;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_4 = u_xlat16_4 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat6 + u_xlat6;\n    u_xlat16_5.x = u_xlat6 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat12 + -0.5;\n    u_xlat16_4 = u_xlat16_5.x * u_xlat16_4 + 1.0;\n    u_xlat16_11 = (-u_xlat0.x) + 1.0;\n    u_xlat16_17 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_17;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_11 + 1.0;\n    u_xlat16_4 = u_xlat16_4 * u_xlat16_5.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4;\n    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.xyz = u_xlat16_10.xyz * u_xlat16_5.xyz + u_xlat1.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"]